// Generated by gencpp from file my_car/Odometry1.msg
// DO NOT EDIT!


#ifndef MY_CAR_MESSAGE_ODOMETRY1_H
#define MY_CAR_MESSAGE_ODOMETRY1_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_car
{
template <class ContainerAllocator>
struct Odometry1_
{
  typedef Odometry1_<ContainerAllocator> Type;

  Odometry1_()
    : x(0.0)
    , y(0.0)
    , th(0.0)  {
    }
  Odometry1_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , th(0.0)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _th_type;
  _th_type th;





  typedef boost::shared_ptr< ::my_car::Odometry1_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_car::Odometry1_<ContainerAllocator> const> ConstPtr;

}; // struct Odometry1_

typedef ::my_car::Odometry1_<std::allocator<void> > Odometry1;

typedef boost::shared_ptr< ::my_car::Odometry1 > Odometry1Ptr;
typedef boost::shared_ptr< ::my_car::Odometry1 const> Odometry1ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_car::Odometry1_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_car::Odometry1_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace my_car

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'my_car': ['/home/emanuel/catkin_ws/src/my_car/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::my_car::Odometry1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_car::Odometry1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_car::Odometry1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_car::Odometry1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_car::Odometry1_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_car::Odometry1_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_car::Odometry1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "32b6af7438d7bcbef150594ddfd57022";
  }

  static const char* value(const ::my_car::Odometry1_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x32b6af7438d7bcbeULL;
  static const uint64_t static_value2 = 0xf150594ddfd57022ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_car::Odometry1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_car/Odometry1";
  }

  static const char* value(const ::my_car::Odometry1_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_car::Odometry1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x\n\
float32 y\n\
float32 th\n\
";
  }

  static const char* value(const ::my_car::Odometry1_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_car::Odometry1_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.th);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Odometry1_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_car::Odometry1_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_car::Odometry1_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "th: ";
    Printer<float>::stream(s, indent + "  ", v.th);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_CAR_MESSAGE_ODOMETRY1_H
